// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleUsers(t *testing.T) {
	t.Parallel()

	query := RoleUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleUserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleUserExists to return true, but got false.")
	}
}

func testRoleUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleUserFound, err := FindRoleUser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roleUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleUserOne := &RoleUser{}
	roleUserTwo := &RoleUser{}
	if err = randomize.Struct(seed, roleUserOne, roleUserDBTypes, false, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}
	if err = randomize.Struct(seed, roleUserTwo, roleUserDBTypes, false, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleUserOne := &RoleUser{}
	roleUserTwo := &RoleUser{}
	if err = randomize.Struct(seed, roleUserOne, roleUserDBTypes, false, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}
	if err = randomize.Struct(seed, roleUserTwo, roleUserDBTypes, false, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roleUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func roleUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleUser) error {
	*o = RoleUser{}
	return nil
}

func testRoleUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoleUser{}
	o := &RoleUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roleUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleUser object: %s", err)
	}

	AddRoleUserHook(boil.BeforeInsertHook, roleUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roleUserBeforeInsertHooks = []RoleUserHook{}

	AddRoleUserHook(boil.AfterInsertHook, roleUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roleUserAfterInsertHooks = []RoleUserHook{}

	AddRoleUserHook(boil.AfterSelectHook, roleUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roleUserAfterSelectHooks = []RoleUserHook{}

	AddRoleUserHook(boil.BeforeUpdateHook, roleUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roleUserBeforeUpdateHooks = []RoleUserHook{}

	AddRoleUserHook(boil.AfterUpdateHook, roleUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roleUserAfterUpdateHooks = []RoleUserHook{}

	AddRoleUserHook(boil.BeforeDeleteHook, roleUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roleUserBeforeDeleteHooks = []RoleUserHook{}

	AddRoleUserHook(boil.AfterDeleteHook, roleUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roleUserAfterDeleteHooks = []RoleUserHook{}

	AddRoleUserHook(boil.BeforeUpsertHook, roleUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roleUserBeforeUpsertHooks = []RoleUserHook{}

	AddRoleUserHook(boil.AfterUpsertHook, roleUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roleUserAfterUpsertHooks = []RoleUserHook{}
}

func testRoleUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleUserToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleUser
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RoleID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleUserSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*RoleUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleUserToOneAccountUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleUser
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleUserSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*RoleUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleUserToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleUser
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleUserDBTypes, false, strmangle.SetComplement(roleUserPrimaryKeyColumns, roleUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RoleID, x.ID) {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleID))
		reflect.Indirect(reflect.ValueOf(&a.RoleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RoleID, x.ID) {
			t.Error("foreign key was wrong value", a.RoleID, x.ID)
		}
	}
}

func testRoleUserToOneRemoveOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleUser
	var b Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleUserDBTypes, false, strmangle.SetComplement(roleUserPrimaryKeyColumns, roleUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRole(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRole(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Role().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Role != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RoleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoleUsers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleUserToOneSetOpAccountUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleUser
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleUserDBTypes, false, strmangle.SetComplement(roleUserPrimaryKeyColumns, roleUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserRoleUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testRoleUserToOneRemoveOpAccountUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleUser
	var b Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleUserDBTypes, false, strmangle.SetComplement(roleUserPrimaryKeyColumns, roleUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserRoleUsers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleUserDBTypes = map[string]string{`ID`: `integer`, `UpdatedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UserID`: `integer`, `RoleID`: `integer`}
	_               = bytes.MinRead
)

func testRoleUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleUserAllColumns) == len(roleUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleUserAllColumns) == len(roleUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleUser{}
	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleUserDBTypes, true, roleUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleUserAllColumns, roleUserPrimaryKeyColumns) {
		fields = roleUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			roleUserAllColumns,
			roleUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(roleUserAllColumns) == len(roleUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleUser{}
	if err = randomize.Struct(seed, &o, roleUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleUser: %s", err)
	}

	count, err := RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleUserDBTypes, false, roleUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleUser: %s", err)
	}

	count, err = RoleUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
