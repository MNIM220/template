// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Role is an object representing the database table.
type Role struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IsActive    bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *roleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleColumns = struct {
	ID          string
	UpdatedAt   string
	CreatedAt   string
	IsActive    string
	Name        string
	Description string
}{
	ID:          "id",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
	IsActive:    "is_active",
	Name:        "name",
	Description: "description",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var RoleWhere = struct {
	ID          whereHelperint
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
	IsActive    whereHelperbool
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"roles\".\"id\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"roles\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"roles\".\"created_at\""},
	IsActive:    whereHelperbool{field: "\"roles\".\"is_active\""},
	Name:        whereHelperstring{field: "\"roles\".\"name\""},
	Description: whereHelpernull_String{field: "\"roles\".\"description\""},
}

// RoleRels is where relationship names are stored.
var RoleRels = struct {
	Permissions string
	RoleUsers   string
}{
	Permissions: "Permissions",
	RoleUsers:   "RoleUsers",
}

// roleR is where relationships are stored.
type roleR struct {
	Permissions PermissionSlice `boil:"Permissions" json:"Permissions" toml:"Permissions" yaml:"Permissions"`
	RoleUsers   RoleUserSlice   `boil:"RoleUsers" json:"RoleUsers" toml:"RoleUsers" yaml:"RoleUsers"`
}

// NewStruct creates a new relationship struct
func (*roleR) NewStruct() *roleR {
	return &roleR{}
}

// roleL is where Load methods for each relationship are stored.
type roleL struct{}

var (
	roleAllColumns            = []string{"id", "updated_at", "created_at", "is_active", "name", "description"}
	roleColumnsWithoutDefault = []string{"created_at", "is_active", "name", "description"}
	roleColumnsWithDefault    = []string{"id", "updated_at"}
	rolePrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleSlice is an alias for a slice of pointers to Role.
	// This should generally be used opposed to []Role.
	RoleSlice []*Role
	// RoleHook is the signature for custom Role hook methods
	RoleHook func(context.Context, boil.ContextExecutor, *Role) error

	roleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleType                 = reflect.TypeOf(&Role{})
	roleMapping              = queries.MakeStructMapping(roleType)
	rolePrimaryKeyMapping, _ = queries.BindMapping(roleType, roleMapping, rolePrimaryKeyColumns)
	roleInsertCacheMut       sync.RWMutex
	roleInsertCache          = make(map[string]insertCache)
	roleUpdateCacheMut       sync.RWMutex
	roleUpdateCache          = make(map[string]updateCache)
	roleUpsertCacheMut       sync.RWMutex
	roleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleBeforeInsertHooks []RoleHook
var roleBeforeUpdateHooks []RoleHook
var roleBeforeDeleteHooks []RoleHook
var roleBeforeUpsertHooks []RoleHook

var roleAfterInsertHooks []RoleHook
var roleAfterSelectHooks []RoleHook
var roleAfterUpdateHooks []RoleHook
var roleAfterDeleteHooks []RoleHook
var roleAfterUpsertHooks []RoleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Role) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Role) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Role) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Role) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Role) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Role) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Role) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Role) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Role) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleHook registers your hook function for all future operations.
func AddRoleHook(hookPoint boil.HookPoint, roleHook RoleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roleBeforeInsertHooks = append(roleBeforeInsertHooks, roleHook)
	case boil.BeforeUpdateHook:
		roleBeforeUpdateHooks = append(roleBeforeUpdateHooks, roleHook)
	case boil.BeforeDeleteHook:
		roleBeforeDeleteHooks = append(roleBeforeDeleteHooks, roleHook)
	case boil.BeforeUpsertHook:
		roleBeforeUpsertHooks = append(roleBeforeUpsertHooks, roleHook)
	case boil.AfterInsertHook:
		roleAfterInsertHooks = append(roleAfterInsertHooks, roleHook)
	case boil.AfterSelectHook:
		roleAfterSelectHooks = append(roleAfterSelectHooks, roleHook)
	case boil.AfterUpdateHook:
		roleAfterUpdateHooks = append(roleAfterUpdateHooks, roleHook)
	case boil.AfterDeleteHook:
		roleAfterDeleteHooks = append(roleAfterDeleteHooks, roleHook)
	case boil.AfterUpsertHook:
		roleAfterUpsertHooks = append(roleAfterUpsertHooks, roleHook)
	}
}

// One returns a single role record from the query.
func (q roleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Role, error) {
	o := &Role{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for roles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Role records from the query.
func (q roleQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleSlice, error) {
	var o []*Role

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Role slice")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Role records in the query.
func (q roleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count roles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if roles exists")
	}

	return count > 0, nil
}

// Permissions retrieves all the permission's Permissions with an executor.
func (o *Role) Permissions(mods ...qm.QueryMod) permissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"permissions\".\"role_id\"=?", o.ID),
	)

	query := Permissions(queryMods...)
	queries.SetFrom(query.Query, "\"permissions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"permissions\".*"})
	}

	return query
}

// RoleUsers retrieves all the role_user's RoleUsers with an executor.
func (o *Role) RoleUsers(mods ...qm.QueryMod) roleUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_user\".\"role_id\"=?", o.ID),
	)

	query := RoleUsers(queryMods...)
	queries.SetFrom(query.Query, "\"role_user\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_user\".*"})
	}

	return query
}

// LoadPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleL) LoadPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRole interface{}, mods queries.Applicator) error {
	var slice []*Role
	var object *Role

	if singular {
		object = maybeRole.(*Role)
	} else {
		slice = *maybeRole.(*[]*Role)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`permissions`),
		qm.WhereIn(`permissions.role_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load permissions")
	}

	var resultSlice []*Permission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissions")
	}

	if len(permissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Permissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &permissionR{}
			}
			foreign.R.Role = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoleID) {
				local.R.Permissions = append(local.R.Permissions, foreign)
				if foreign.R == nil {
					foreign.R = &permissionR{}
				}
				foreign.R.Role = local
				break
			}
		}
	}

	return nil
}

// LoadRoleUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleL) LoadRoleUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRole interface{}, mods queries.Applicator) error {
	var slice []*Role
	var object *Role

	if singular {
		object = maybeRole.(*Role)
	} else {
		slice = *maybeRole.(*[]*Role)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_user`),
		qm.WhereIn(`role_user.role_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_user")
	}

	var resultSlice []*RoleUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_user")
	}

	if len(roleUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleUserR{}
			}
			foreign.R.Role = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoleID) {
				local.R.RoleUsers = append(local.R.RoleUsers, foreign)
				if foreign.R == nil {
					foreign.R = &roleUserR{}
				}
				foreign.R.Role = local
				break
			}
		}
	}

	return nil
}

// AddPermissions adds the given related objects to the existing relationships
// of the role, optionally inserting them as new records.
// Appends related to o.R.Permissions.
// Sets related.R.Role appropriately.
func (o *Role) AddPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Permission) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
				strmangle.WhereClause("\"", "\"", 2, permissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleR{
			Permissions: related,
		}
	} else {
		o.R.Permissions = append(o.R.Permissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &permissionR{
				Role: o,
			}
		} else {
			rel.R.Role = o
		}
	}
	return nil
}

// SetPermissions removes all previously related items of the
// role replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Role's Permissions accordingly.
// Replaces o.R.Permissions with related.
// Sets related.R.Role's Permissions accordingly.
func (o *Role) SetPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Permission) error {
	query := "update \"permissions\" set \"role_id\" = null where \"role_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Permissions {
			queries.SetScanner(&rel.RoleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Role = nil
		}

		o.R.Permissions = nil
	}
	return o.AddPermissions(ctx, exec, insert, related...)
}

// RemovePermissions relationships from objects passed in.
// Removes related items from R.Permissions (uses pointer comparison, removal does not keep order)
// Sets related.R.Role.
func (o *Role) RemovePermissions(ctx context.Context, exec boil.ContextExecutor, related ...*Permission) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoleID, nil)
		if rel.R != nil {
			rel.R.Role = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("role_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Permissions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Permissions)
			if ln > 1 && i < ln-1 {
				o.R.Permissions[i] = o.R.Permissions[ln-1]
			}
			o.R.Permissions = o.R.Permissions[:ln-1]
			break
		}
	}

	return nil
}

// AddRoleUsers adds the given related objects to the existing relationships
// of the role, optionally inserting them as new records.
// Appends related to o.R.RoleUsers.
// Sets related.R.Role appropriately.
func (o *Role) AddRoleUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleUser) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_user\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleR{
			RoleUsers: related,
		}
	} else {
		o.R.RoleUsers = append(o.R.RoleUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleUserR{
				Role: o,
			}
		} else {
			rel.R.Role = o
		}
	}
	return nil
}

// SetRoleUsers removes all previously related items of the
// role replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Role's RoleUsers accordingly.
// Replaces o.R.RoleUsers with related.
// Sets related.R.Role's RoleUsers accordingly.
func (o *Role) SetRoleUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleUser) error {
	query := "update \"role_user\" set \"role_id\" = null where \"role_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleUsers {
			queries.SetScanner(&rel.RoleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Role = nil
		}

		o.R.RoleUsers = nil
	}
	return o.AddRoleUsers(ctx, exec, insert, related...)
}

// RemoveRoleUsers relationships from objects passed in.
// Removes related items from R.RoleUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Role.
func (o *Role) RemoveRoleUsers(ctx context.Context, exec boil.ContextExecutor, related ...*RoleUser) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoleID, nil)
		if rel.R != nil {
			rel.R.Role = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("role_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleUsers)
			if ln > 1 && i < ln-1 {
				o.R.RoleUsers[i] = o.R.RoleUsers[ln-1]
			}
			o.R.RoleUsers = o.R.RoleUsers[:ln-1]
			break
		}
	}

	return nil
}

// Roles retrieves all the records using an executor.
func Roles(mods ...qm.QueryMod) roleQuery {
	mods = append(mods, qm.From("\"roles\""))
	return roleQuery{NewQuery(mods...)}
}

// FindRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRole(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Role, error) {
	roleObj := &Role{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"roles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from roles")
	}

	return roleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Role) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no roles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleInsertCacheMut.RLock()
	cache, cached := roleInsertCache[key]
	roleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleAllColumns,
			roleColumnsWithDefault,
			roleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleType, roleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleType, roleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"roles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"roles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into roles")
	}

	if !cached {
		roleInsertCacheMut.Lock()
		roleInsertCache[key] = cache
		roleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Role.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Role) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleUpdateCacheMut.RLock()
	cache, cached := roleUpdateCache[key]
	roleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleAllColumns,
			rolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update roles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"roles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleType, roleMapping, append(wl, rolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update roles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for roles")
	}

	if !cached {
		roleUpdateCacheMut.Lock()
		roleUpdateCache[key] = cache
		roleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for roles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in role slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all role")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Role) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no roles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleUpsertCacheMut.RLock()
	cache, cached := roleUpsertCache[key]
	roleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleAllColumns,
			roleColumnsWithDefault,
			roleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleAllColumns,
			rolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert roles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rolePrimaryKeyColumns))
			copy(conflict, rolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"roles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleType, roleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleType, roleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert roles")
	}

	if !cached {
		roleUpsertCacheMut.Lock()
		roleUpsertCache[key] = cache
		roleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Role record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Role) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Role provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rolePrimaryKeyMapping)
	sql := "DELETE FROM \"roles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for roles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for roles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for roles")
	}

	if len(roleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Role) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"roles\".* FROM \"roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleSlice")
	}

	*o = slice

	return nil
}

// RoleExists checks if the Role row exists.
func RoleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"roles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if roles exists")
	}

	return exists, nil
}
